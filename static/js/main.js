// Generated by CoffeeScript 1.3.3

/* -------------------------------------------- 
     Begin game.coffee 
--------------------------------------------
*/


/*global ko:false
*/


(function() {
  var $game, $last_active, $main_menu, $menus, $pause_menu, GameViewModel, canvas, entities, viewModel, world;

  $menus = $('#menus');

  $game = $('#game');

  $pause_menu = $('#pause-menu');

  $main_menu = $('#main-menu');

  GameViewModel = function() {
    var self;
    self = this;
    self.paused = ko.observable(false);
    self.level = ko.observable(1);
    self.money = ko.observable(500);
  };

  viewModel = new GameViewModel();

  ko.applyBindings(viewModel);

  window.start_game = function(level) {
    window.clear_game();
    viewModel.paused(false);
    viewModel.level(level);
    viewModel.money(500);
    window.create_ball(2, 1);
  };

  $('.pause').click(function() {
    window.forward_to($pause_menu);
    $game.addClass('paused');
    $menus.fadeIn();
    viewModel.paused(true);
    return false;
  });

  $('.resume').click(function() {
    $game.removeClass('paused');
    $menus.fadeOut();
    viewModel.paused(false);
    return false;
  });

  $('.confirm-exit-game').click(function() {
    viewModel.paused(false);
    $game.fadeOut();
    return window.backwards_to($main_menu);
  });

  /* -------------------------------------------- 
       Begin tutorial.coffee 
  --------------------------------------------
  */


  window.start_tutorial = function() {
    return window.start_game(1);
  };

  /* -------------------------------------------- 
       Begin menu.coffee 
  --------------------------------------------
  */


  $menus = $('#menus');

  $game = $('#game');

  $last_active = $('.overlay-window.active');

  window.forward_to = function($element) {
    $last_active = $('.overlay-window.active');
    if ($last_active.attr('id') === $element.attr('id')) {
      return;
    }
    if ($element.prevAll('.overlay-window.active').length === 0) {
      $menus.css({
        'left': '+=600px'
      });
    }
    $last_active.after($element).removeClass('active');
    $element.addClass('active');
    return $menus.animate({
      "left": "-=600px"
    });
  };

  window.backwards_to = function($element) {
    $last_active = $('.overlay-window.active');
    if ($last_active.attr('id') === $element.attr('id')) {
      return;
    }
    if ($element.prevAll('.overlay-window.active').length > 0) {
      $menus.css({
        'left': '-=600px'
      });
    }
    $last_active.before($element).removeClass('active');
    $element.addClass('active');
    return $menus.animate({
      "left": "+=600px"
    });
  };

  window.show_menu = function(menu_target) {
    var $menu_target;
    if (menu_target === 'previous') {
      window.backwards_to($last_active);
      return;
    }
    $menu_target = $(menu_target);
    return window.forward_to($menu_target);
  };

  $('li[data-menu]').click(function() {
    var $this, menu_target;
    $this = $(this);
    menu_target = $this.data('menu');
    return window.show_menu(menu_target);
  });

  $('.start-tutorial').click(function() {
    window.start_tutorial();
    $menus.fadeOut();
    return $game.fadeIn();
  });

  /* -------------------------------------------- 
       Begin physics.coffee 
  --------------------------------------------
  */


  /*global boxbox:false, $:false
  */


  canvas = $('#gameCanvas')[0];

  world = boxbox.createWorld(canvas, {
    debugDraw: true
  });

  entities = [];

  window.create_ball = function(x, y) {
    return window.ball = world.createEntity({
      name: 'ball',
      x: 2,
      y: 1,
      shape: "circle",
      height: 1.5,
      width: 1.5,
      fixedRotation: true,
      friction: 0.3,
      restitution: 0,
      color: 'blue',
      maxVelocityX: 4
    });
  };

  window.clear_game = function() {
    var entity, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = entities.length; _i < _len; _i++) {
      entity = entities[_i];
      _results.push(entity.destroy);
    }
    return _results;
  };

}).call(this);
